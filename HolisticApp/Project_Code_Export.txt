===== Datei: App.xaml =====
﻿<?xml version="1.0" encoding="UTF-8" ?>
<Application 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    x:Class="HolisticApp.App">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Styles/Colors.xaml" />
                <ResourceDictionary Source="Resources/Styles/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>


===== Datei: App.xaml.cs =====
﻿using HolisticApp.Constants;
using HolisticApp.Services.Interfaces;
using HolisticApp.Models;
using Microsoft.Extensions.Logging;

namespace HolisticApp;

public partial class App
{
    private readonly IUserService _userService;
    private readonly ILogger<App> _logger;
    private readonly INavigationService _navigationService;

    [Obsolete("Obsolete")]
    public App(IUserService userService, ILogger<App> logger, INavigationService navigationService)
    {
        InitializeComponent();
        _userService = userService;
        _logger = logger;
        _navigationService = navigationService;
        _logger.LogInformation("Die App wurde gestartet.");

        MainPage = new AppShell();
        InitializeAsync();
    }

    private async void InitializeAsync()
    {
        try
        {
            await Task.Delay(500);
            var user = await _userService.GetLoggedInUserAsync();
            if (user == null)
            {
                _logger.LogInformation("[App] Kein Benutzer angemeldet. Navigiere zur Login-Seite.");
                await _navigationService.NavigateToAsync(Routes.LoginPage);
                return;
            }

            _logger.LogInformation("[App] User {UserId} ({Role}) gefunden.", user.Id, user.Role);
            switch (user.Role)
            {
                case UserRole.Doctor:
                    await _navigationService.NavigateToAsync(Routes.DoctorDashboardPage);
                    break;
                case UserRole.Admin:
                    await _navigationService.NavigateToAsync(Routes.AdminDashboardPage);
                    break;
                default:
                    var anamnesisCompleted = await _userService.IsAnamnesisCompletedAsync();
                    await _navigationService.NavigateToAsync(anamnesisCompleted ? Routes.HomePage : Routes.AnamnesisPage);
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "[App] Fehler während der Initialisierung.");
            await _navigationService.NavigateToAsync(Routes.LoginPage);
        }
    }
}


===== Datei: MauiProgram.cs =====
﻿using HolisticApp.Data.Interfaces;
using HolisticApp.Services.Interfaces;
using HolisticApp.ViewModels;
using Microsoft.Extensions.Logging;
using Serilog;

namespace HolisticApp;

public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        try
        {
            Log.Logger = new LoggerConfiguration()
                .MinimumLevel.Debug()
                .WriteTo.File("app.log", rollingInterval: RollingInterval.Day)
                .CreateLogger();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Initialisieren des Loggings: {ex}");
        }

        var builder = MauiApp.CreateBuilder();
        builder
            .UseMauiApp<App>()
            .ConfigureFonts(fonts =>
            {
                fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
            });

        // Logging konfigurieren
        builder.Logging.ClearProviders();
        builder.Logging.AddSerilog();

        // **DI-Registrierungen**
        builder.Services.AddSingleton<INavigationService, Services.NavigationService>();
        builder.Services.AddSingleton<IUserService, Services.UserService>();

        // **ViewModels**
        builder.Services.AddTransient<LoginViewModel>();
        builder.Services.AddTransient<RegistrationViewModel>();
        builder.Services.AddTransient<HomeViewModel>();
        builder.Services.AddTransient<AnamnesisViewModel>();
        builder.Services.AddTransient<UserMenuViewModel>();
        builder.Services.AddTransient<DoctorDashboardViewModel>();
        builder.Services.AddTransient<SettingsViewModel>();
        builder.Services.AddTransient<UserInfoViewModel>();

        // **Views**
        builder.Services.AddTransient<Views.LoginPage>();
        builder.Services.AddTransient<Views.RegistrationPage>();
        builder.Services.AddTransient<Views.HomePage>();
        builder.Services.AddTransient<Views.AnamnesisPage>();
        builder.Services.AddTransient<Views.UserMenuPage>();
        builder.Services.AddTransient<Views.DoctorDashboardPage>();
        builder.Services.AddTransient<Views.SettingsPage>();
        builder.Services.AddTransient<Views.UserInfoPage>();

        return builder.Build();
    }
}


===== Datei: HolisticApp.csproj =====
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <!-- Hier alle Plattformen auflisten -->
        <TargetFrameworks>net9.0-android;net9.0-maccatalyst</TargetFrameworks>

        <OutputType>Exe</OutputType>
        <RootNamespace>HolisticApp</RootNamespace>
        <UseMaui>true</UseMaui>
        <SingleProject>true</SingleProject>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>

        <!-- Display name -->
        <ApplicationTitle>HolisticApp</ApplicationTitle>

        <!-- App Identifier -->
        <ApplicationId>com.companyname.holisticapp</ApplicationId>

        <!-- Versions -->
        <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
        <ApplicationVersion>1</ApplicationVersion>

        <!-- Windows -->
        <WindowsPackageType>None</WindowsPackageType>
    </PropertyGroup>

    <!-- Plattformabhängige Einstellungen -->
    <PropertyGroup Condition="'$(TargetFramework)' == 'net9.0-android'">
        <SupportedOSPlatformVersion>21.0</SupportedOSPlatformVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(TargetFramework)' == 'net9.0-maccatalyst'">
        <SupportedOSPlatformVersion>15.0</SupportedOSPlatformVersion>
    </PropertyGroup>

    <ItemGroup>
        <!-- App Icon -->
        <MauiIcon Include="Resources/AppIcon/appicon.svg" ForegroundFile="Resources/AppIcon/appiconfg.svg" Color="#512BD4" />

        <!-- Splash Screen -->
        <MauiSplashScreen Include="Resources/Splash/continuum_health_logo.png"
                          Color="#FAFAFA"
                          BaseSize="600,600" />
        
        
        <!-- Images -->
        <MauiImage Include="Resources/Images/continuum_health_logo.png"
                   Resize="true"
                   BaseSize="400,400" />

        <!-- Custom Fonts -->
        <MauiFont Include="Resources/Fonts/*" />

        <!-- Raw Assets -->
        <MauiAsset Include="Resources/Raw/**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
        <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.0" />
        <PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
        <PackageReference Include="MySqlConnector" Version="2.4.0" />
        <PackageReference Include="Serilog" Version="4.1.0" />
        <PackageReference Include="Serilog.Extensions.Logging" Version="8.0.0" />
        <PackageReference Include="Serilog.Sinks.File" Version="5.0.0" />
        <PackageReference Include="sqlite-net-pcl" Version="1.9.172" />
        <PackageReference Include="SQLitePCLRaw.bundle_green" Version="2.1.2" />
    </ItemGroup>

</Project>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Models/LoginResult.cs =====
using HolisticApp.Enums;

namespace HolisticApp.Models;

public readonly struct LoginResult(User? user, LoginStatus status)
{
    public User? User { get; } = user;
    public LoginStatus Status { get; } = status;
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Models/User.cs =====
namespace HolisticApp.Models
{
    public enum UserRole
    {
        Patient,
        Doctor,
        Admin
    }

    public class User
    {
        public int Id { get; init; }
        public string? Username { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; init; }
        public string CurrentComplaint { get; set; }
        public string Gender { get; set; }
        public int? Age { get; set; }
        public decimal? Height { get; set; }
        public decimal? Weight { get; set; }
        public UserRole Role { get; set; }
        public int? MasterAccountId { get; set; }
        
        public string? LinkedDoctorName { get; set; }

        public override string ToString() =>
            $"{Username} ({Email}) - {Gender}, {Age?.ToString() ?? "N/A"} Jahre, {Role}";
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Models/Invitation.cs =====
namespace HolisticApp.Models;

public class Invitation
{
    public int Id { get; set; }
    public string Token { get; set; } = string.Empty;
    public int MasterAccountId { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime ExpiresAt { get; set; }
    public bool IsUsed { get; set; }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Models/AuthenticateResult.cs =====
namespace HolisticApp.Models;

public readonly struct AuthenticateResult
{
    public User User { get; }
    public bool IsAuthenticated { get; }
    
    public AuthenticateResult(User user)
    {
        User = user;
        IsAuthenticated = true;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/RegistrationPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class RegistrationPage
{
    public RegistrationPage(RegistrationViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/SettingsPage.xaml.cs =====
namespace HolisticApp.Views;

public partial class SettingsPage
{
    public SettingsPage(ViewModels.SettingsViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/AdminDashboardPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class AdminDashboardPage
{
    public AdminDashboardPage(AdminDashboardViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/UserMenuPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class UserMenuPage
{
    public UserMenuPage(UserMenuViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/HomePage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class HomePage
{
    public HomePage(HomeViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/AnamnesisPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class AnamnesisPage
{
    public AnamnesisPage(AnamnesisViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/DoctorRegistrationPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class DoctorRegistrationPage
{
    public DoctorRegistrationPage(DoctorRegistrationViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/UserInfoPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class UserInfoPage
{
    public UserInfoPage(UserInfoViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/DoctorDashboardPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class DoctorDashboardPage
{
    public DoctorDashboardPage(DoctorDashboardViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/LoginPage.xaml.cs =====
using HolisticApp.ViewModels;

namespace HolisticApp.Views;

public partial class LoginPage
{
    public LoginPage(LoginViewModel vm)
    {
        InitializeComponent();
        BindingContext = vm;
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/LoginPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:viewmodels="clr-namespace:HolisticApp.ViewModels"
    x:Class="HolisticApp.Views.LoginPage"
    x:DataType="viewmodels:LoginViewModel"
    Title="Login"
    BackgroundColor="{StaticResource BackgroundColor}">

    <ScrollView>
        <VerticalStackLayout 
            Padding="{OnPlatform Android=20, iOS=10, MacCatalyst=60, WinUI=60}" 
            Spacing="{OnPlatform Android=20, iOS=10, MacCatalyst=40, WinUI=40}" 
            HorizontalOptions="Center" 
            VerticalOptions="Center"
            BackgroundColor="Transparent">

            <!-- Logo -->
            <Image Source="continuum_health_logo.png"
                   Margin="0,-90,0,-20"
                   HorizontalOptions="Center"/>

            <!-- Login Card -->
            <Frame HasShadow="True" 
                   BackgroundColor="{StaticResource SecondaryColor}"
                   CornerRadius="{OnPlatform Android=20, iOS=20, MacCatalyst=40, WinUI=40}"
                   Padding="{OnPlatform Android=20, iOS=20, MacCatalyst=40, WinUI=40}">
                <VerticalStackLayout Spacing="{OnPlatform Android=15, iOS=15, MacCatalyst=30, WinUI=30}">
                    
                    <!-- Email-Feld -->
                    <Label TextColor="{StaticResource PrimaryColor}" 
                           FontAttributes="Bold">
                        <Label.FontSize>
                            <OnPlatform x:TypeArguments="x:Double">
                                <On Platform="Android,iOS" Value="14" />
                                <On Platform="MacCatalyst,WinUI" Value="28" />
                            </OnPlatform>
                        </Label.FontSize>
                    </Label>
                    <Border StrokeShape="RoundRectangle 8" 
                            StrokeThickness="0" 
                            BackgroundColor="{StaticResource SecondaryColor}"
                            Padding="{OnPlatform Android=10, iOS=10, MacCatalyst=20, WinUI=20}">
                        <Entry Placeholder="Benutzername oder Email" 
                               Text="{Binding EmailOrUsername}" 
                               TextColor="Black">
                            <Entry.FontSize>
                                <OnPlatform x:TypeArguments="x:Double">
                                    <On Platform="Android,iOS" Value="14" />
                                    <On Platform="MacCatalyst,WinUI" Value="28" />
                                </OnPlatform>
                            </Entry.FontSize>
                        </Entry>
                    </Border>

                    <!-- Passwort-Feld -->
                    <Label TextColor="{StaticResource PrimaryColor}" 
                           FontAttributes="Bold">
                        <Label.FontSize>
                            <OnPlatform x:TypeArguments="x:Double">
                                <On Platform="Android,iOS" Value="14" />
                                <On Platform="MacCatalyst,WinUI" Value="28" />
                            </OnPlatform>
                        </Label.FontSize>
                    </Label>
                    <Border StrokeShape="RoundRectangle 8" 
                            StrokeThickness="0" 
                            BackgroundColor="{StaticResource SecondaryColor}"
                            Padding="{OnPlatform Android=10, iOS=10, MacCatalyst=20, WinUI=20}">
                        <Entry Placeholder="Passwort" 
                               Text="{Binding Password}" 
                               IsPassword="True" 
                               TextColor="Black">
                            <Entry.FontSize>
                                <OnPlatform x:TypeArguments="x:Double">
                                    <On Platform="Android,iOS" Value="14" />
                                    <On Platform="MacCatalyst,WinUI" Value="28" />
                                </OnPlatform>
                            </Entry.FontSize>
                        </Entry>
                    </Border>

                    <!-- Login-Button -->
                    <Button Text="Login" 
                            Command="{Binding LoginCommand}" 
                            TextColor="White" 
                            BackgroundColor="{StaticResource PrimaryColor}"
                            HeightRequest="{OnPlatform Android=50, iOS=50, MacCatalyst=100, WinUI=100}">
                        <Button.FontSize>
                            <OnPlatform x:TypeArguments="x:Double">
                                <On Platform="Android,iOS" Value="16" />
                                <On Platform="MacCatalyst,WinUI" Value="32" />
                            </OnPlatform>
                        </Button.FontSize>
                    </Button>
                </VerticalStackLayout>
            </Frame>

            <!-- Registrieren-Button -->
            <Button Text="Registrieren" 
                    Command="{Binding RegisterCommand}" 
                    TextColor="{StaticResource PrimaryColor}" 
                    BackgroundColor="{StaticResource BorderColor}" 
                    BorderColor="{StaticResource PrimaryColor}" 
                    BorderWidth="1"
                    HeightRequest="{OnPlatform Android=50, iOS=50, MacCatalyst=100, WinUI=100}">
                <Button.FontSize>
                    <OnPlatform x:TypeArguments="x:Double">
                        <On Platform="Android,iOS" Value="16" />
                        <On Platform="MacCatalyst,WinUI" Value="32" />
                    </OnPlatform>
                </Button.FontSize>
            </Button>
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/AnamnesisPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:viewmodels="clr-namespace:HolisticApp.ViewModels"
    x:Class="HolisticApp.Views.AnamnesisPage"
    x:DataType="viewmodels:AnamnesisViewModel"
    Title="Anamnese"
    BackgroundColor="{StaticResource BackgroundColor}">
    
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Zurück" 
                     Order="Primary"
                     Priority="0"
                     Command="{Binding ReturnCommand}" />
    </ContentPage.ToolbarItems>
    
    <ScrollView>
        <StackLayout Padding="20" Spacing="20">
            <Label Text="Alter (Jahre):" />
            <Entry Text="{Binding Age}" Placeholder="Alter eingeben" Keyboard="Numeric" />
            <Label Text="Geschlecht:" />
            <Picker ItemsSource="{Binding GenderOptions}" 
                    SelectedItem="{Binding SelectedGender}" 
                    Title="Wähle dein Geschlecht" />
            <Label Text="Größe (cm):" />
            <Entry Text="{Binding Height}" Placeholder="Größe eingeben" Keyboard="Numeric" />
            <Label Text="Gewicht (kg):" />
            <Entry Text="{Binding Weight}" Placeholder="Gewicht eingeben" Keyboard="Numeric" />
            <StackLayout Orientation="Horizontal" VerticalOptions="Center">
                <Label Text="Aktuelle Beschwerden:" VerticalOptions="Center"/>
                <Switch IsToggled="{Binding HasComplaint}" VerticalOptions="Center" Margin="10,0"/>
            </StackLayout>
            <Label Text="Beschwerde auswählen:" IsVisible="{Binding HasComplaint}" />
            <Picker ItemsSource="{Binding ComplaintOptions}" 
                    SelectedItem="{Binding SelectedComplaint}" 
                    Title="Wähle eine Beschwerde" IsVisible="{Binding HasComplaint}" />
            <Label Text="{Binding Severity, StringFormat=Stärke der Beschwerden: {0}}" 
                   IsVisible="{Binding HasComplaint}" />
            <Stepper Minimum="1" Maximum="10" Increment="1" 
                     Value="{Binding Severity}" 
                     IsVisible="{Binding HasComplaint}" />
            <Button Text="Speichern" Command="{Binding SaveCommand}" />
        </StackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/DoctorRegistrationPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:viewmodels="clr-namespace:HolisticApp.ViewModels"
    x:Class="HolisticApp.Views.DoctorRegistrationPage"
    x:DataType="viewmodels:DoctorRegistrationViewModel"
    Title="Ärzte Registrierung"
    BackgroundColor="{StaticResource BackgroundColor}">

    <ScrollView>
        <StackLayout Padding="30" Spacing="20" VerticalOptions="Center">
            <Label Text="Registrierung als Arzt/Therapeut" 
                   FontSize="24" 
                   HorizontalOptions="Center" 
                   TextColor="{StaticResource PrimaryColor}" />
            <Entry x:Name="UsernameEntry" 
                   Text="{Binding Username}" 
                   Placeholder="Benutzername" />
            <Entry x:Name="EmailEntry" 
                   Text="{Binding Email}" 
                   Placeholder="Email" 
                   Keyboard="Email" />
            <Entry x:Name="PasswordEntry" 
                   Text="{Binding Password}" 
                   Placeholder="Passwort" 
                   IsPassword="True" />
            <Button Text="Registrieren" 
                    Command="{Binding RegisterCommand}" />
        </StackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/UserMenuPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    x:Class="HolisticApp.Views.UserMenuPage"
    Title="Benutzermenü">
    
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Zurück" 
                     Order="Primary"
                     Priority="0"
                     Command="{Binding ReturnCommand}" />
    </ContentPage.ToolbarItems>
    
    <StackLayout Padding="20" Spacing="15">
        <Label Text="{Binding Username}" FontAttributes="Bold" FontSize="Large" />
        <Button Text="Info" Command="{Binding ShowInfoCommand}" />
        <Button Text="Einstellungen" Command="{Binding ShowSettingsCommand}" />
        <Button Text="Logout" Command="{Binding LogoutCommand}" />
    </StackLayout>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/HomePage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:viewmodels="clr-namespace:HolisticApp.ViewModels"
    x:Class="HolisticApp.Views.HomePage"
    x:DataType="viewmodels:HomeViewModel"
    Title="Übersicht"
    BackgroundColor="{StaticResource BackgroundColor}">
    
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="{Binding UserInitials}" Command="{Binding OpenUserMenuCommand}" />
    </ContentPage.ToolbarItems>
    
    <ContentPage.Content>
        <StackLayout Padding="20" Spacing="20">
            <Button Text="Anamnese" 
                    Command="{Binding OpenAnamnesisCommand}" />
            <Button Text="Befunde hochladen" />
            <Button Text="Chat" />
        </StackLayout>
    </ContentPage.Content>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/SettingsPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    x:Class="HolisticApp.Views.SettingsPage"
    Title="Einstellungen">
    
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Zurück" 
                     Order="Primary"
                     Priority="0"
                     Command="{Binding ReturnCommand}" />
    </ContentPage.ToolbarItems>
    
    <StackLayout Padding="20" Spacing="15">
        <Label Text="Push-Benachrichtigungen" FontAttributes="Bold" />
        <Switch IsToggled="{Binding NotificationsEnabled, Mode=TwoWay}" />
        <Button Text="Account löschen" Command="{Binding DeleteAccountCommand}" TextColor="White" BackgroundColor="Red" />
    </StackLayout>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/RegistrationPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:vm="clr-namespace:HolisticApp.ViewModels"
    x:Class="HolisticApp.Views.RegistrationPage"
    x:DataType="vm:RegistrationViewModel"
    Title="Registrierung"
    BackgroundColor="{StaticResource BackgroundColor}">
    
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Zurück" 
                     Order="Primary"
                     Priority="0"
                     Command="{Binding ReturnCommand}" />
    </ContentPage.ToolbarItems>
    
    <ScrollView>
        <StackLayout Padding="30" Spacing="20" VerticalOptions="Center">
            <Label Text="Registrierung" 
                   FontSize="24" 
                   HorizontalOptions="Center" 
                   TextColor="{StaticResource PrimaryColor}" />
            <Entry Text="{Binding Username}" Placeholder="Benutzername" BackgroundColor="{StaticResource BackgroundColor}"/>
            <Entry Text="{Binding Email}" Placeholder="Email" Keyboard="Email" BackgroundColor="{StaticResource BackgroundColor}"/>
            <Entry Text="{Binding Password}" Placeholder="Passwort" IsPassword="True" BackgroundColor="{StaticResource BackgroundColor}"/>
            <Button Text="Registrieren" Command="{Binding RegisterCommand}" />
        </StackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/DoctorDashboardPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:viewmodels="clr-namespace:HolisticApp.ViewModels"
    xmlns:models="clr-namespace:HolisticApp.Models"
    x:Class="HolisticApp.Views.DoctorDashboardPage"
    x:DataType="viewmodels:DoctorDashboardViewModel"
    Title="Doctor Dashboard"
    BackgroundColor="{StaticResource BackgroundColor}">

    <ContentPage.ToolbarItems>
        <ToolbarItem Text="{Binding UserInitials}" Command="{Binding OpenUserMenuCommand}" />
    </ContentPage.ToolbarItems>

    <ScrollView>
        <StackLayout Padding="20" Spacing="20">
            <Label Text="Ihr Einladungslink:" FontAttributes="Bold" />
            <Label Text="{Binding GeneratedInvitationLink}" LineBreakMode="WordWrap" />
            <Button Text="Einladung generieren" Command="{Binding GenerateInvitationCommand}" />
            <Button Text="Patienten laden" Command="{Binding LoadPatientsCommand}" />
            <Label Text="Registrierte Patienten:" FontAttributes="Bold" />
            <ListView x:Name="PatientsListView" ItemsSource="{Binding Patients}">
                <ListView.ItemTemplate>
                    <DataTemplate x:DataType="models:User">
                        <ViewCell>
                            <StackLayout Padding="10">
                                <Label Text="{Binding Username}" FontAttributes="Bold" />
                                <Label Text="{Binding Email}" />
                            </StackLayout>
                        </ViewCell>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </StackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/AdminDashboardPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:viewmodels="clr-namespace:HolisticApp.ViewModels"
    xmlns:models="clr-namespace:HolisticApp.Models"
    x:Class="HolisticApp.Views.AdminDashboardPage"
    x:DataType="viewmodels:AdminDashboardViewModel"
    Title="Admin Dashboard"
    BackgroundColor="{StaticResource BackgroundColor}">

    <ContentPage.ToolbarItems>
        <ToolbarItem Text="{Binding UserInitials}" Command="{Binding OpenUserMenuCommand}" />
    </ContentPage.ToolbarItems>

    <ScrollView>
        <StackLayout Padding="20" Spacing="20">
            <Button Text="Doktor erstellen" Command="{Binding CreateDoctorCommand}" />
            <Button Text="Lade Doktoren" Command="{Binding LoadDoctorsCommand}" />
            <Label Text="Doktoren:" FontAttributes="Bold" />
            <ListView ItemsSource="{Binding Doctors}">
                <ListView.ItemTemplate>
                    <DataTemplate x:DataType="models:User">
                        <ViewCell>
                            <StackLayout Padding="10">
                                <Label Text="{Binding Username}" FontAttributes="Bold" />
                                <Label Text="{Binding Email}" />
                            </StackLayout>
                        </ViewCell>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </StackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Views/UserInfoPage.xaml =====
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    x:Class="HolisticApp.Views.UserInfoPage"
    Title="Benutzerinformationen">
    
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Zurück" 
                     Order="Primary"
                     Priority="0"
                     Command="{Binding ReturnCommand}" />
    </ContentPage.ToolbarItems>
    
    <ScrollView>
        <StackLayout Padding="20" Spacing="10">
            <Label Text="{Binding Username}" FontSize="24" FontAttributes="Bold"/>
            <Label Text="{Binding Email}" />
            <Label Text="{Binding Age}" />
            <Label Text="{Binding Gender}" />
            <Label Text="{Binding Height}" />
            <Label Text="{Binding Weight}" />
            <Label Text="{Binding Complaint}" />
            <Label Text="{Binding Doctor}" />
        </StackLayout>
    </ScrollView>
</ContentPage>


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Data/InvitationRepository.cs =====
using HolisticApp.Data.Interfaces;
using HolisticApp.Models;
using Microsoft.Extensions.Logging;
using MySqlConnector;

namespace HolisticApp.Data;

public class InvitationRepository(string connectionString, ILogger<InvitationRepository> logger)
    : IInvitationRepository
{
    private async Task<MySqlConnection> GetConnectionAsync()
    {
        var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();
        return connection;
    }

    public async Task<Invitation> CreateInvitationAsync(Invitation invitation)
    {
        await using var connection = await GetConnectionAsync();
        await using var command = connection.CreateCommand();
        try
        {
            command.CommandText = @"
                INSERT INTO Invitations (Token, MasterAccountId, CreatedAt, ExpiresAt, IsUsed)
                VALUES (@token, @masterAccountId, @createdAt, @expiresAt, @isUsed);
                SELECT LAST_INSERT_ID();";
            command.Parameters.AddWithValue("@token", invitation.Token);
            command.Parameters.AddWithValue("@masterAccountId", invitation.MasterAccountId);
            command.Parameters.AddWithValue("@createdAt", invitation.CreatedAt);
            command.Parameters.AddWithValue("@expiresAt", invitation.ExpiresAt);
            command.Parameters.AddWithValue("@isUsed", invitation.IsUsed);

            var result = await command.ExecuteScalarAsync();
            if (result == null)
                throw new InvalidOperationException("ExecuteScalarAsync returned null.");

            invitation.Id = Convert.ToInt32(result);
            logger.LogInformation("Invitation (ID: {InvitationId}) wurde erfolgreich erstellt.", invitation.Id);
            return invitation;
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Fehler beim Erstellen der Invitation mit Token {Token}", invitation.Token);
            throw;
        }
    }

    public async Task<Invitation?> GetInvitationByTokenAsync(string token)
    {
        await using var connection = await GetConnectionAsync();
        await using var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Invitations WHERE Token = @token";
        command.Parameters.AddWithValue("@token", token);

        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            return new Invitation
            {
                Id = Convert.ToInt32(reader["Id"]),
                // Vermeide mögliche Nullverweiszuweisung:
                Token = reader["Token"].ToString() ?? string.Empty,
                MasterAccountId = Convert.ToInt32(reader["MasterAccountId"]),
                CreatedAt = Convert.ToDateTime(reader["CreatedAt"]),
                ExpiresAt = Convert.ToDateTime(reader["ExpiresAt"]),
                IsUsed = Convert.ToBoolean(reader["IsUsed"])
            };
        }

        return null;
    }

    public async Task MarkInvitationAsUsedAsync(int invitationId)
    {
        await using var connection = await GetConnectionAsync();
        await using var command = connection.CreateCommand();
        command.CommandText = "UPDATE Invitations SET IsUsed = TRUE WHERE Id = @id";
        command.Parameters.AddWithValue("@id", invitationId);
        await command.ExecuteNonQueryAsync();
    }

    public Task<bool> IsUserInDatabaseAync(User user)
    {
        throw new NotImplementedException();
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Data/UserRepository.cs =====
using System.Data;
using System.Security.Cryptography;
using System.Text;
using HolisticApp.Data.Interfaces;
using HolisticApp.Models;
using Microsoft.Extensions.Logging;
using MySqlConnector;

namespace HolisticApp.Data
{
    public class UserRepository : IUserRepository
    {
        private readonly string _connectionString;
        private readonly ILogger<UserRepository> _logger;

        // SQL-Abfragen als Konstanten
        private const string SelectUserByIdSql = @"
            SELECT Id, Username, Email, PasswordHash, CurrentComplaint, Age, Gender, Height, Weight, MasterAccountId, Role 
            FROM Users WHERE Id = @id";

        private const string SelectUserByEmailOrUsernameSql = @"
            SELECT Id, Username, Email, PasswordHash, CurrentComplaint, Age, Gender, Height, Weight, MasterAccountId, Role 
            FROM Users WHERE Email = @value OR Username = @value";

        private const string InsertUserSql = @"
            INSERT INTO Users 
            (Username, Email, PasswordHash, CurrentComplaint, Age, Gender, Height, Weight, Role)
            VALUES (@username, @email, @passwordHash, @currentComplaint, @age, @gender, @height, @weight, @role)";

        private const string UpdateUserSql = @"
            UPDATE Users
            SET Username = @username, 
                Email = @email, 
                PasswordHash = @passwordHash,
                CurrentComplaint = @currentComplaint,
                Age = @age,
                Gender = @gender,
                Height = @height,
                Weight = @weight,
                Role = @role
            WHERE Id = @id";

        private const string DeleteUserSql = "DELETE FROM Users WHERE Id = @id";

        private const string CountUserByEmailOrUsernameSql = @"
            SELECT COUNT(*) 
            FROM Users 
            WHERE Email = @value OR Username = @value";

        private const string SelectUsersByRoleSql = @"
            SELECT Id, Username, Email, PasswordHash, CurrentComplaint, Age, Gender, Height, Weight, MasterAccountId, Role 
            FROM Users WHERE Role = @role";

        public UserRepository(string connectionString, ILogger<UserRepository> logger)
        {
            _connectionString = connectionString ?? throw new ArgumentNullException(nameof(connectionString));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Erstellt und öffnet eine MySQL-Verbindung.
        /// </summary>
        private async Task<MySqlConnection> GetConnectionAsync()
        {
            try
            {
                var connection = new MySqlConnection(_connectionString);
                await connection.OpenAsync();
                _logger.LogDebug("Datenbankverbindung erfolgreich geöffnet.");
                return connection;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Öffnen der Datenbankverbindung.");
                throw;
            }
        }

        /// <summary>
        /// Berechnet den SHA256-Hash eines gegebenen Strings.
        /// </summary>
        private string ComputeHash(string input)
        {
            using var sha256 = SHA256.Create();
            var bytes = Encoding.UTF8.GetBytes(input);
            var hashBytes = sha256.ComputeHash(bytes);
            return Convert.ToHexString(hashBytes);
        }

        /// <summary>
        /// Liest einen User aus dem aktuellen Datenleser aus.
        /// </summary>
        private User CreateUserFromReader(MySqlDataReader reader)
        {
            try
            {
                return new User
                {
                    Id = GetInt(reader, "Id"),
                    Username = GetString(reader, "Username"),
                    Email = GetString(reader, "Email"),
                    PasswordHash = GetString(reader, "PasswordHash"),
                    CurrentComplaint = GetString(reader, "CurrentComplaint", "Keine Beschwerden"),
                    Age = GetNullableInt(reader, "Age"),
                    Gender = GetString(reader, "Gender", "Nicht angegeben"),
                    Height = GetNullableDecimal(reader, "Height"),
                    Weight = GetNullableDecimal(reader, "Weight"),
                    MasterAccountId = GetNullableInt(reader, "MasterAccountId"),
                    Role = Enum.TryParse(GetString(reader, "Role", "Patient"), out UserRole parsedRole)
                        ? parsedRole
                        : UserRole.Patient
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Erstellen eines Benutzerobjekts aus dem Reader.");
                throw;
            }
        }

        /// <summary>
        /// Fügt alle Benutzerparameter dem SQL-Befehl hinzu.
        /// </summary>
        private void AddUserParameters(MySqlCommand command, User user)
        {
            command.Parameters.AddWithValue("@username", user.Username);
            command.Parameters.AddWithValue("@email", user.Email);
            command.Parameters.AddWithValue("@passwordHash", user.PasswordHash);
            command.Parameters.AddWithValue("@currentComplaint", user.CurrentComplaint);
            command.Parameters.AddWithValue("@age", user.Age.HasValue ? (object)user.Age.Value : DBNull.Value);
            command.Parameters.AddWithValue("@gender", user.Gender);
            command.Parameters.AddWithValue("@height", user.Height.HasValue ? (object)user.Height.Value : DBNull.Value);
            command.Parameters.AddWithValue("@weight", user.Weight.HasValue ? (object)user.Weight.Value : DBNull.Value);
            command.Parameters.AddWithValue("@role", user.Role.ToString());
        }

        /// <summary>
        /// Hilfsmethode, um einen String-Wert aus dem Reader auszulesen.
        /// </summary>
        private string GetString(MySqlDataReader reader, string columnName, string defaultValue = "")
        {
            var ordinal = reader.GetOrdinal(columnName);
            return reader.IsDBNull(ordinal) ? defaultValue : reader.GetString(ordinal);
        }

        private static int GetInt(MySqlDataReader reader, string columnName, int defaultValue = 0)
        {
            var ordinal = reader.GetOrdinal(columnName);
            return reader.IsDBNull(ordinal) ? defaultValue : reader.GetInt32(ordinal);
        }

        private static int? GetNullableInt(MySqlDataReader reader, string columnName)
        {
            var ordinal = reader.GetOrdinal(columnName);
            return reader.IsDBNull(ordinal) ? null : reader.GetInt32(ordinal);
        }

        private decimal? GetNullableDecimal(MySqlDataReader reader, string columnName)
        {
            var ordinal = reader.GetOrdinal(columnName);
            return reader.IsDBNull(ordinal) ? null : reader.GetDecimal(ordinal);
        }

        /// <summary>
        /// Speichert (registriert) einen neuen Benutzer in der Datenbank.
        /// </summary>
        public async Task<bool> SaveUserAsync(string username, string email, string password)
        {
            try
            {
                // Erstelle ein neues User-Objekt mit Standardwerten.
                var newUser = new User
                {
                    // Id wird von der DB generiert
                    Username = username,
                    Email = email,
                    PasswordHash = ComputeHash(password),
                    CurrentComplaint = "Keine Beschwerden",
                    Age = null,
                    Gender = "Nicht angegeben",
                    Height = null,
                    Weight = null,
                    Role = UserRole.Patient
                };

                await using var connection = await GetConnectionAsync();
                await using var command = connection.CreateCommand();
                command.CommandText = InsertUserSql;
                AddUserParameters(command, newUser);

                var result = await command.ExecuteNonQueryAsync();
                if (result > 0)
                {
                    _logger.LogInformation("Neuer Benutzer {Email} erfolgreich registriert.", email);
                    return true;
                }
                else
                {
                    _logger.LogWarning("Registrierung des Benutzers {Email} fehlgeschlagen.", email);
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Speichern des Benutzers {Email}.", email);
                return false;
            }
        }

        /// <summary>
        /// Aktualisiert die Daten eines bestehenden Benutzers.
        /// </summary>
        public async Task<bool> UpdateUserAsync(User user)
        {
            if (user == null)
            {
                _logger.LogWarning("UpdateUserAsync wurde mit null übergeben.");
                return false;
            }

            try
            {
                await using var connection = await GetConnectionAsync();
                await using var command = connection.CreateCommand();
                command.CommandText = UpdateUserSql;
                command.Parameters.AddWithValue("@id", user.Id);
                AddUserParameters(command, user);

                var result = await command.ExecuteNonQueryAsync();
                if (result > 0)
                {
                    _logger.LogInformation("Benutzer (ID: {UserId}) erfolgreich aktualisiert.", user.Id);
                    return true;
                }
                else
                {
                    _logger.LogWarning("Aktualisierung des Benutzers (ID: {UserId}) fehlgeschlagen.", user.Id);
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Aktualisieren des Benutzers (ID: {UserId}).", user.Id);
                return false;
            }
        }

        /// <summary>
        /// Löscht einen Benutzer anhand der ID.
        /// </summary>
        public async Task<bool> DeleteUserAsync(int id)
        {
            try
            {
                await using var connection = await GetConnectionAsync();
                await using var command = connection.CreateCommand();
                command.CommandText = DeleteUserSql;
                command.Parameters.AddWithValue("@id", id);

                var result = await command.ExecuteNonQueryAsync();
                if (result > 0)
                {
                    _logger.LogInformation("Benutzer (ID: {UserId}) erfolgreich gelöscht.", id);
                    return true;
                }
                else
                {
                    _logger.LogWarning("Kein Benutzer (ID: {UserId}) gefunden, um gelöscht zu werden.", id);
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Löschen des Benutzers (ID: {UserId}).", id);
                return false;
            }
        }

        /// <summary>
        /// Überprüft, ob bereits ein Benutzer mit der angegebenen E-Mail oder dem Benutzernamen existiert.
        /// </summary>
        public async Task<bool> IsUserInDatabaseAsync(string emailOrUsername)
        {
            try
            {
                await using var connection = await GetConnectionAsync();
                await using var command = connection.CreateCommand();
                command.CommandText = CountUserByEmailOrUsernameSql;
                command.Parameters.AddWithValue("@value", emailOrUsername);

                var resultObj = await command.ExecuteScalarAsync();
                if (resultObj != null && int.TryParse(resultObj.ToString(), out int count))
                {
                    return count > 0;
                }
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Überprüfen, ob der Benutzer {Value} bereits existiert.", emailOrUsername);
                return false;
            }
        }

        /// <summary>
        /// Sucht alle Benutzer mit der angegebenen Rolle.
        /// </summary>
        public async Task<List<User>> FindUsersByRole(UserRole role)
        {
            var users = new List<User>();

            try
            {
                await using var connection = await GetConnectionAsync();
                await using var command = connection.CreateCommand();
                command.CommandText = SelectUsersByRoleSql;
                command.Parameters.AddWithValue("@role", role.ToString());

                await using var reader = await command.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    users.Add(CreateUserFromReader(reader));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler beim Abrufen von Benutzern mit der Rolle {Role}.", role);
            }

            return users;
        }

        /// <summary>
        /// Authentifiziert einen Benutzer anhand von E-Mail/Username und Passwort.
        /// </summary>
        public async Task<AuthenticateResult> AuthenticateUser(string emailOrUsername, string password)
        {
            try
            {
                await using var connection = await GetConnectionAsync();
                await using var command = connection.CreateCommand();
                command.CommandText = SelectUserByEmailOrUsernameSql;
                command.Parameters.AddWithValue("@value", emailOrUsername);

                await using var reader = await command.ExecuteReaderAsync();
                if (await reader.ReadAsync())
                {
                    var user = CreateUserFromReader(reader);
                    var inputHash = ComputeHash(password);

                    if (string.Equals(user.PasswordHash, inputHash, StringComparison.OrdinalIgnoreCase))
                    {
                        _logger.LogInformation("Benutzer {EmailOrUsername} erfolgreich authentifiziert.", emailOrUsername);
                        return new AuthenticateResult(user);
                    }
                    else
                    {
                        _logger.LogWarning("Authentifizierung fehlgeschlagen: Falsches Passwort für {EmailOrUsername}.", emailOrUsername);
                    }
                }
                else
                {
                    _logger.LogWarning("Authentifizierung fehlgeschlagen: Kein Benutzer für {EmailOrUsername} gefunden.", emailOrUsername);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fehler bei der Authentifizierung für {EmailOrUsername}.", emailOrUsername);
            }
            return default; // IsAuthenticated = false, User = null
        }
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Data/Interfaces/IInvitationRepository.cs =====
using HolisticApp.Models;

namespace HolisticApp.Data.Interfaces;

public interface IInvitationRepository
{
    Task<Invitation> CreateInvitationAsync(Invitation invitation);
    Task<Invitation?> GetInvitationByTokenAsync(string token); 
    Task MarkInvitationAsUsedAsync(int invitationId);
    Task<bool> IsUserInDatabaseAync(User user);
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Data/Interfaces/IUserRepository.cs =====
using HolisticApp.Models;

namespace HolisticApp.Data.Interfaces;

public interface IUserRepository
{
    Task<bool> SaveUserAsync(string username, string email, string password);
    Task<bool> DeleteUserAsync(int id);
    Task<bool> UpdateUserAsync(User user);
    Task<bool> IsUserInDatabaseAsync(string emailOrUsername);
    Task<List<User>> FindUsersByRole(UserRole role);
    Task<AuthenticateResult> AuthenticateUser(string emailOrUsername, string password);
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/Properties/launchSettings.json =====
{
  "profiles": {
    "Windows Machine": {
      "commandName": "Project",
      "nativeDebugging": false
    }
  }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/AdminDashboardViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Models;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;
using System.Collections.ObjectModel;
using HolisticApp.Constants;

namespace HolisticApp.ViewModels;

public partial class AdminDashboardViewModel : BaseViewModel
{
    [ObservableProperty]
    private ObservableCollection<User> _doctors = [];

    public AdminDashboardViewModel(INavigationService navigationService, IUserService userService, ILogger<AdminDashboardViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    public async Task InitializeAsync()
    {
        var doctorList = await UserService.FindUsersByRole(UserRole.Doctor);
        Doctors = new ObservableCollection<User>(doctorList);
    }

    [RelayCommand]
    private async Task CreateDoctorAsync() => await NavigationService.NavigateToAsync(Routes.DoctorRegistrationPage);

    [RelayCommand]
    private async Task OpenUserMenuAsync() => await NavigationService.NavigateToAsync(Routes.UserMenuPage);
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/SettingsViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class SettingsViewModel : BaseViewModel
{
    [ObservableProperty]
    private bool _notificationsEnabled;

    public SettingsViewModel(INavigationService navigationService, IUserService userService, ILogger<SettingsViewModel> logger)
        : base(navigationService, userService, logger)
    {
        NotificationsEnabled = Preferences.Get("NotificationsEnabled", true);
    }

    partial void OnNotificationsEnabledChanged(bool value) => Preferences.Set("NotificationsEnabled", value);

    [RelayCommand]
    private async Task DeleteAccountAsync()
    {
        var confirm = await Application.Current.MainPage.DisplayAlert("Account löschen", "Bist du sicher?", "Ja", "Nein");
        if (!confirm) return;

        await UserService.DeleteCurrentUserAsync();
        await NavigationService.NavigateToAsync(Routes.LoginPage);
    }

    [RelayCommand]
    private async Task ReturnAsync() => await NavigationService.GoBackAsync();
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/RegistrationVIewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;
using HolisticApp.Models;

namespace HolisticApp.ViewModels;

public partial class RegistrationViewModel : BaseViewModel
{
    [ObservableProperty]
    private string _username = string.Empty;

    [ObservableProperty]
    private string _email = string.Empty;

    [ObservableProperty]
    private string _password = string.Empty;

    [ObservableProperty]
    private string _invitationToken = string.Empty;

    public RegistrationViewModel(INavigationService navigationService, IUserService userService, ILogger<RegistrationViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    [RelayCommand]
    private async Task RegisterAsync()
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            await Application.Current.MainPage.DisplayAlert("Fehler", "Bitte alle Felder ausfüllen!", "OK");
            return;
        }

        if (!string.IsNullOrWhiteSpace(InvitationToken))
        {
            /*var isValid = await UserService.ValidateInvitationAsync(InvitationToken);
            if (!isValid)
            {
                await Application.Current.MainPage.DisplayAlert("Fehler", "Ungültiger oder abgelaufener Einladungscode!", "OK");
                return;
            }

            user.MasterAccountId = await UserService.GetMasterAccountIdFromInvitationAsync(InvitationToken);*/
        }

        var result = await UserService.RegisterUserAsync(Username, Email, Password);
        if (result)
        {
            await Application.Current.MainPage.DisplayAlert("Erfolg", "Registrierung erfolgreich!", "OK");
            await NavigationService.NavigateToAsync(Routes.LoginPage);
        }
        else
        {
            await Application.Current.MainPage.DisplayAlert("Fehler", "Registrierung fehlgeschlagen!", "OK");
        }
    }

    [RelayCommand]
    private async Task ReturnAsync() => await NavigationService.GoBackAsync();
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/UserInfoViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Models;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class UserInfoViewModel : BaseViewModel
{
    [ObservableProperty] private string _username = string.Empty;
    [ObservableProperty] private string _email = string.Empty;
    [ObservableProperty] private string _age = string.Empty;
    [ObservableProperty] private string _gender = string.Empty;
    [ObservableProperty] private string _height = string.Empty;
    [ObservableProperty] private string _weight = string.Empty;
    [ObservableProperty] private string _complaint = string.Empty;
    [ObservableProperty] private string _doctor = string.Empty;

    public UserInfoViewModel(INavigationService navigationService, IUserService userService, ILogger<UserInfoViewModel> logger)
        : base(navigationService, userService, logger)
    {
        LoadUserData();
    }

    private async void LoadUserData()
    {
        var user = await UserService.GetLoggedInUserAsync();
        if (user == null) return;

        Username = user.Username;
        Email = user.Email;
        Age = user.Age?.ToString() ?? "Nicht angegeben";
        Gender = user.Gender ?? "Nicht angegeben";
        Height = user.Height?.ToString() ?? "Nicht angegeben";
        Weight = user.Weight?.ToString() ?? "Nicht angegeben";
        Complaint = string.IsNullOrEmpty(user.CurrentComplaint) ? "Keine Beschwerden" : user.CurrentComplaint;
        Doctor = user.MasterAccountId?.ToString() ?? "Unbekannt";
    }

    [RelayCommand]
    private async Task ReturnAsync() => await NavigationService.GoBackAsync();
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/DoctorDashboardVIewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Models;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;
using System.Collections.ObjectModel;
using HolisticApp.Constants;

namespace HolisticApp.ViewModels;

public partial class DoctorDashboardViewModel : BaseViewModel
{
    [ObservableProperty]
    private ObservableCollection<User> _patients = [];

    [ObservableProperty]
    private string _generatedInvitationLink = string.Empty;

    public DoctorDashboardViewModel(INavigationService navigationService, IUserService userService, ILogger<DoctorDashboardViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    public async Task InitializeAsync()
    {
        /*var user = await UserService.GetLoggedInUserAsync();
        if (user?.Role == UserRole.Doctor)
        {
            var patientList = await UserService.GetPatientsForDoctorAsync(user.Id);
            Patients = new ObservableCollection<User>(patientList);
        }*/
    }

    [RelayCommand]
    private async Task GenerateInvitationAsync()
    {
        /*var user = await UserService.GetLoggedInUserAsync();
        if (user?.Role != UserRole.Doctor) return;

        var invitationLink = await UserService.GenerateInvitationLinkAsync(user.Id);
        GeneratedInvitationLink = invitationLink;*/
    }

    [RelayCommand]
    private async Task OpenUserMenuAsync() => await NavigationService.NavigateToAsync(Routes.UserMenuPage);
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/LoginViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Enums;
using HolisticApp.Models;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class LoginViewModel : BaseViewModel
{
    [ObservableProperty]
    private string _emailOrUsername = string.Empty;

    [ObservableProperty]
    private string _password = string.Empty;
    private readonly IUserService _userService;

    public LoginViewModel(INavigationService navigationService, IUserService userService, ILogger<LoginViewModel> logger)
        : base(navigationService, userService, logger)
    {
        _userService = userService;
    }

    [RelayCommand]
    private async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(EmailOrUsername) || string.IsNullOrWhiteSpace(Password))
        {
            await Application.Current.MainPage.DisplayAlert("Fehler", "Bitte alle Felder ausfüllen!", "OK");
            return;
        }

        Logger.LogInformation("Login-Versuch für {EmailOrUsername}", EmailOrUsername);
        var result = await UserService.LoginAsync(EmailOrUsername, Password);

        switch (result.Status)
        {
            case LoginStatus.Success:
            {
                switch (result.User.Role)
                {
                    case UserRole.Admin:
                        await NavigationService.NavigateToAsync(Routes.AdminDashboardPage);
                        break;
                    case UserRole.Doctor:
                        await NavigationService.NavigateToAsync(Routes.DoctorDashboardPage);
                        break;
                    default:
                        var anamnesisCompleted = await _userService.IsAnamnesisCompletedAsync();
                        var targetPage = anamnesisCompleted ? Routes.HomePage : Routes.AnamnesisPage;
                        await NavigationService.NavigateToAsync(targetPage);
                        break;
                }
                break;
            }
            case LoginStatus.UserNotFound:
                await Application.Current.MainPage.DisplayAlert("Fehler", "Benutzer nicht gefunden!", "OK");
                break;
            case LoginStatus.InvalidPassword:
                await Application.Current.MainPage.DisplayAlert("Fehler", "Passwort inkorrekt!", "OK");
                break;
            case LoginStatus.Error:
                await Application.Current.MainPage.DisplayAlert("Fehler", "Beim Login ist ein Fehler aufgetreten!", "OK")!;
                break;
            }
        }
    }


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/DoctorRegistrationViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Models;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class DoctorRegistrationViewModel : BaseViewModel
{
    [ObservableProperty] private string _username = string.Empty;
    [ObservableProperty] private string _email = string.Empty;
    [ObservableProperty] private string _password = string.Empty;

    public DoctorRegistrationViewModel(INavigationService navigationService, IUserService userService, ILogger<DoctorRegistrationViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    [RelayCommand]
    private async Task RegisterAsync()
    {
        var currentPage = Application.Current?.Windows.FirstOrDefault()?.Page;
        try
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
            {
                await currentPage?.DisplayAlert("Fehler", "Bitte alle Felder ausfüllen.", "OK")!;
                Logger.LogWarning("DoctorRegistration fehlgeschlagen: Ein oder mehrere Felder sind leer.");
                return;
            }
            
            Logger.LogInformation("Versuche, Doktor {Name} zu registrieren.", Username);
            var result = await UserService.RegisterUserAsync(Username, Email, Password);

            if (result)
            {
                await currentPage?.DisplayAlert("Erfolg", "Doktor erfolgreich registriert.", "OK")!;
                Logger.LogInformation("Doktor {Name} wurde erfolgreich registriert.", Username);
                await NavigationService.GoBackAsync();
            }
            else
            {
                await currentPage?.DisplayAlert("Fehler", "Fehler beim Registrieren des Doktors.", "OK")!;
                Logger.LogError("Fehler beim Registrieren von Doktor {Name}.", Username);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unerwarteter Fehler bei der Doktor-Registrierung für {Name}.", Username);
            await currentPage?.DisplayAlert("Fehler", "Ein unerwarteter Fehler ist aufgetreten.", "OK")!;
        }
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/BaseViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels
{
    public abstract class BaseViewModel : ObservableObject
    {
        protected readonly INavigationService NavigationService;
        protected readonly IUserService UserService;
        protected readonly ILogger Logger;

        protected BaseViewModel(INavigationService navigationService, IUserService userService, ILogger logger)
        {
            NavigationService = navigationService;
            UserService = userService;
            Logger = logger;
        }
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/HomeViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class HomeViewModel : BaseViewModel
{
    [ObservableProperty]
    private string _userInitials = string.Empty;

    public HomeViewModel(INavigationService navigationService, IUserService userService, ILogger<HomeViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    public async Task InitializeAsync()
    {
        var user = await UserService.GetLoggedInUserAsync();
        UserInitials = user?.Username?.Substring(0, 1).ToUpper() ?? string.Empty;
    }

    [RelayCommand]
    private async Task OpenAnamnesisAsync() => await NavigationService.NavigateToAsync(Routes.AnamnesisPage);

    [RelayCommand]
    private async Task OpenUserMenuAsync() => await NavigationService.NavigateToAsync(Routes.UserMenuPage);
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/AnamnesisViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class AnamnesisViewModel : BaseViewModel
{
    [ObservableProperty] private string _age = string.Empty;
    [ObservableProperty] private string _selectedGender = string.Empty;
    [ObservableProperty] private string _height = string.Empty;
    [ObservableProperty] private string _weight = string.Empty;
    [ObservableProperty] private bool _hasComplaint;
    [ObservableProperty] private string _selectedComplaint = string.Empty;
    [ObservableProperty] private double _severity = 1;

    public string[] GenderOptions { get; } = ["Männlich", "Weiblich", "Divers"];
    public string[] ComplaintOptions { get; } = ["Verdauungsbeschwerden", "Kopfschmerzen", "Rückenschmerzen"];

    public AnamnesisViewModel(INavigationService navigationService, IUserService userService, ILogger<AnamnesisViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    public async Task InitializeAsync()
    {
        var user = await UserService.GetLoggedInUserAsync();
        if (user != null)
        {
            Age = user.Age?.ToString() ?? string.Empty;
            SelectedGender = string.IsNullOrEmpty(user.Gender) ? GenderOptions[0] : user.Gender;
            Height = user.Height?.ToString() ?? string.Empty;
            Weight = user.Weight?.ToString() ?? string.Empty;

            if (!string.IsNullOrEmpty(user.CurrentComplaint) && user.CurrentComplaint != "Keine Beschwerden")
            {
                HasComplaint = true;
                var parts = user.CurrentComplaint.Split(" (Stärke: ");
                SelectedComplaint = parts[0];

                if (parts.Length > 1 && parts[1].EndsWith("/10)"))
                {
                    var severityStr = parts[1].Replace("/10)", "");
                    if (double.TryParse(severityStr, out var parsedSeverity))
                        Severity = parsedSeverity;
                }
            }
        }
    }

    [RelayCommand]
    private async Task ReturnAsync() => await NavigationService.GoBackAsync();

    [RelayCommand]
    private async Task SaveAsync()
    {
        var user = await UserService.GetLoggedInUserAsync();
        if (user == null)
        {
            Logger.LogError("Kein eingeloggter Benutzer gefunden.");
            return;
        }

        user.Age = int.TryParse(Age, out var parsedAge) ? parsedAge : null;
        user.Gender = SelectedGender;
        user.Height = decimal.TryParse(Height, out var parsedHeight) ? parsedHeight : null;
        user.Weight = decimal.TryParse(Weight, out var parsedWeight) ? parsedWeight : null;
        user.CurrentComplaint = HasComplaint ? $"{SelectedComplaint} (Stärke: {Severity}/10)" : "Keine Beschwerden";

        var result = await UserService.UpdateUserAsync(user);
        if (result)
        {
            Logger.LogInformation("Anamnese erfolgreich gespeichert für Benutzer {UserId}", user.Id);
            await NavigationService.NavigateToAsync(Routes.HomePage);
        }
    }
}


===== Datei: /Users/svenkonz/Documents/GitHub/HolisticApp/HolisticApp/ViewModels/UserMenuViewModel.cs =====
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using HolisticApp.Constants;
using HolisticApp.Services.Interfaces;
using Microsoft.Extensions.Logging;

namespace HolisticApp.ViewModels;

public partial class UserMenuViewModel : BaseViewModel
{
    public UserMenuViewModel(INavigationService navigationService, IUserService userService, ILogger<UserMenuViewModel> logger)
        : base(navigationService, userService, logger)
    {
    }

    [RelayCommand]
    private async Task ShowInfo() => await NavigationService.NavigateToAsync(Routes.UserInfoPage);

    [RelayCommand]
    private async Task ShowSettings() => await NavigationService.NavigateToAsync(Routes.SettingsPage);

    [RelayCommand]
    private async Task Logout()
    {
        await UserService.LogoutUserAsync();
        await NavigationService.NavigateToAsync(Routes.LoginPage);
    }
}


